````julia
import Base
function Base.show(io::IO, m::MIME"text/html", x::Array)
    print(io, "<table>")
    for i in 1:size(x,1)
        print(io, "<tr>")
        [print(io, "<td>$r</td>") for r in x[i,:]]
        print(io, "</tr>")
    end
    print(io, "</table>")
end

#This isn't valid latex, doesn't matter for the test
function Base.show(io::IO, m::MIME"text/latex", x::Array)
    println(io, "\\begin{tabular}")
    for i in 1:size(x,1)
        [print(io, "$r & ") for r in x[i,:]]
        print(io,"\\\\")
        println(io, " \\hline")
    end
    print(io, "\\end{tabular")
end

#This isn't valid markdown, doesn't matter for the test
function Base.show(io::IO, m::MIME"text/markdown", x::Array)
    println(io, "-----")
    for i in 1:size(x,1)
        print(io, "| ")
        [print(io, "$r | ") for r in x[i,:]]
        println(io, "")
    end
    print(io, "-----")
end


x = [collect(1:3) collect(1:3)]
ca = collect('a':'d')
ca
````



<table><tr><td>a</td></tr><tr><td>b</td></tr><tr><td>c</td></tr><tr><td>d</td></tr></table>

````julia
display(ca)
display(x)
````



<table><tr><td>a</td></tr><tr><td>b</td></tr><tr><td>c</td></tr><tr><td>d</td></tr></table>
<table><tr><td>1</td><td>1</td></tr><tr><td>2</td><td>2</td></tr><tr><td>3</td><td>3</td></tr></table>

````julia
m = Base.Markdown.parse("**Some Markdown**")
m
````



<div class="markdown"><p><strong>Some Markdown</strong></p>
</div>
